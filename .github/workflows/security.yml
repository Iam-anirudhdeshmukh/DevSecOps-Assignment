name: Security Pipeline Scan

# Triggers for the pipeline
on:
  push:
    branches: [main, security-pipeline]
  pull_request:
    branches: [main, security-pipeline]
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday at midnight UTC

jobs:
  # =====================
  # CodeQL Static Analysis
  # =====================
  codeql:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: [python]

    steps:
      # Step 1: Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Initialize CodeQL for Python
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      # Step 3: Automatically build the code if needed
      - name: Perform CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3

      # Step 4: Run CodeQL analysis and upload results to GitHub
      - name: Analyze Code with CodeQL
        uses: github/codeql-action/analyze@v3

  # ==========================
  # Secret Detection with Gitleaks
  # ==========================
  gitleaks:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Run Gitleaks to detect hardcoded secrets
      - name: Run Gitleaks Secret Scan
        run: |
          GITLEAKS_VERSION=$(curl --silent "https://api.github.com/repos/gitleaks/gitleaks/releases/latest" | jq -r .tag_name)
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz" -o gitleaks.tar.gz
          mkdir gitleaks-bin
          tar -xzf gitleaks.tar.gz -C gitleaks-bin
          chmod +x gitleaks-bin/gitleaks
          ./gitleaks-bin/gitleaks detect --source=. --report-format=json --report-path=gitleaks-results.json || true

      # Step 3: Upload Gitleaks scan results as artifacts
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: gitleaks-results.json

      # Step 4: Generate summary report in GitHub UI
      - name: Gitleaks Job Summary
        if: always()
        run: |
          if [ -s gitleaks-results.json ]; then
            echo "### 🛑 Gitleaks detected secrets 🛑" >> $GITHUB_STEP_SUMMARY
            echo "| Rule ID | Commit | Start Line | Author | Date | Email | File |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|--------|------------|--------|------|-------|------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.[] | 
              "| \(.RuleID // "N/A") | \(.Commit // "N/A") | \(.StartLine // "N/A") | \(.Author // "N/A") | \(.Date // "N/A") | \(.Email // "N/A") | \(.File // "N/A") |"' gitleaks-results.json >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No secrets detected by Gitleaks." >> $GITHUB_STEP_SUMMARY
          fi

  # ===================================
  # Dependency Vulnerability Scan (Trivy)
  # ===================================
  trivy-deps:
    name: Dependency Scan (Trivy)
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Install Trivy package scanner
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      # Step 3: Scan Python dependencies from requirements.txt
      - name: Run Trivy Dependency Scan
        run: |
          mkdir -p trivy-reports
          trivy fs requirements.txt --scanners vuln --vuln-type library --format json --output trivy-reports/trivy-results.json || true
          trivy fs requirements.txt --scanners vuln --vuln-type library --format table --output trivy-reports/trivy-report.txt || true

      # Step 4: Upload scan results
      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy-reports

  # ======================================
  # Docker Image Vulnerability Scan (Trivy)
  # ======================================
  trivy-image:
    name: Docker Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [trivy-deps]

    steps:
      # Step 1: Checkout code for Docker context
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Build Docker image with dummy key
      - name: Build Docker Image
        run: |
          docker build --build-arg TMDB_V3_API_KEY=dummy_key -t my-app:latest .

      # Step 4: Install Trivy for container scanning
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      # Step 5: Run Trivy scan on built Docker image
      - name: Run Trivy Container Image Scan
        run: |
          mkdir -p trivy-container-reports
          trivy image --format json --output trivy-container-reports/image-results.json my-app:latest || true
          trivy image --format table --output trivy-container-reports/image-report.txt my-app:latest || true

      # Step 6: Upload container scan results
      - name: Upload Trivy Container Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-container-reports
          path: trivy-container-reports

      # Step 7: Summarize Docker scan in GitHub Actions UI
      - name: Trivy Container Job Summary
        if: always()
        run: |
          if [ -s trivy-container-reports/image-results.json ]; then
            echo "### 🐳 Docker Image Vulnerabilities 🐳" >> $GITHUB_STEP_SUMMARY
            echo "| Vulnerability ID | Package | Installed Version | Fixed Version | Severity | Type | Description |" >> $GITHUB_STEP_SUMMARY
            echo "|------------------|---------|-------------------|----------------|----------|------|-------------|" >> $GITHUB_STEP_SUMMARY
            jq -r '
              .Results[] 
              | select(.Vulnerabilities != null)
              | .Vulnerabilities[]
              | "| \(.VulnerabilityID) | \(.PkgName) | \(.InstalledVersion) | \(.FixedVersion // "N/A") | \(.Severity) | \(.Type) | \((.Description // "N/A") | gsub("\n"; " ")) |"
            ' trivy-container-reports/image-results.json >> $GITHUB_STEP_SUMMARY
          else
            echo "No vulnerabilities detected in Docker image." >> $GITHUB_STEP_SUMMARY
          fi

