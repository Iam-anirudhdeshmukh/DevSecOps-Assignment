name: 🔐 Security Pipeline

on:
  push:
    branches: [main, security-pipeline]
  pull_request:
    branches: [main, security-pipeline]
  schedule:
    - cron: '0 0 * * 0'  # every Sunday at midnight UTC

jobs:
  codeql:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: [python]
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/analyze@v3
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: codeql-results.sarif

  gitleaks:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Run Gitleaks Secret Scan (JSON only)
      - name: Run Gitleaks Secret Scan
        run: |
          GITLEAKS_VERSION=$(curl --silent "https://api.github.com/repos/gitleaks/gitleaks/releases/latest" | jq -r .tag_name)
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz" -o gitleaks.tar.gz
          mkdir gitleaks-bin
          tar -xzf gitleaks.tar.gz -C gitleaks-bin
          chmod +x gitleaks-bin/gitleaks
          ./gitleaks-bin/gitleaks detect --source=. --report-format=json --report-path=gitleaks-results.json || true

      # Upload Gitleaks JSON report
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: gitleaks-results.json

      # Gitleaks Job Summary
      - name: Gitleaks Job Summary
        if: always()
        run: |
          if [ -s gitleaks-results.json ]; then
            echo "### 🛑 Gitleaks detected secrets 🛑" >> $GITHUB_STEP_SUMMARY
            echo "| Rule ID | Commit | Start Line | Author | Date | Email | File |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|--------|------------|--------|------|-------|------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.[] | 
              "| \(.RuleID // "N/A") | \(.Commit // "N/A") | \(.StartLine // "N/A") | \(.Author // "N/A") | \(.Date // "N/A") | \(.Email // "N/A") | \(.File // "N/A") |"' gitleaks-results.json >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No secrets detected by Gitleaks." >> $GITHUB_STEP_SUMMARY
          fi

  trivy-deps:
    name: Dependency Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install Trivy for Dependency Scanning
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      # Run Trivy dependency scan specifically on Python dependencies (requirements.txt)
      - name: Run Trivy Dependency Scan
        run: |
          mkdir -p trivy-reports
          # Scan only requirements.txt file (Python deps)
          trivy fs requirements.txt --scanners vuln --vuln-type library --format json --output trivy-reports/trivy-results.json || true
          trivy fs requirements.txt --scanners vuln --vuln-type library --format table --output trivy-reports/trivy-report.txt || true

      # Upload Trivy Reports
      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy-reports

  trivy-image:
    name: Docker Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [trivy-deps]
    steps:
      - uses: actions/checkout@v4

      # Set up Docker Buildx for multi-platform builds if needed
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build Docker Image (with dummy API key for CI)
      - name: Build Docker Image
        run: |
          docker build --build-arg TMDB_V3_API_KEY=dummy_key -t my-app:latest .

      # Install Trivy for Container Scan
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      # Scan Docker Image with Trivy
      - name: Run Trivy Container Image Scan
        run: |
          mkdir -p trivy-container-reports
          trivy image --format json --output trivy-container-reports/image-results.json my-app:latest || true
          trivy image --format table --output trivy-container-reports/image-report.txt my-app:latest || true

      # Upload Container Scan Results
      - name: Upload Trivy Container Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-container-reports
          path: trivy-container-reports
