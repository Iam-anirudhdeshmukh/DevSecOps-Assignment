name: Security Pipeline Scan

on:
  push:
    branches: [main, security-pipeline]
  pull_request:
    branches: [main, security-pipeline]
  schedule:
    - cron: '0 0 * * 0'  # every Sunday at midnight UTC

jobs:
  codeql:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: [python]
    steps:
      - uses: actions/checkout@v4
        # Checkout repository to the runner

      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
        # Initialize CodeQL with the selected language

      - name: Perform CodeQL autobuild
        uses: github/codeql-action/autobuild@v3
        # Automatically build the code for analysis

      - uses: github/codeql-action/analyze@v3
        # Analyze the code and upload SARIF results automatically

  gitleaks:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        # Checkout repo for scanning

      - name: Run Gitleaks Secret Scan
        run: |
          GITLEAKS_VERSION=$(curl --silent "https://api.github.com/repos/gitleaks/gitleaks/releases/latest" | jq -r .tag_name)
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz" -o gitleaks.tar.gz
          mkdir gitleaks-bin
          tar -xzf gitleaks.tar.gz -C gitleaks-bin
          chmod +x gitleaks-bin/gitleaks
          ./gitleaks-bin/gitleaks detect --source=. --report-format=json --report-path=gitleaks-results.json || true
        # Download and run Gitleaks secret scan, outputting JSON report

      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: gitleaks-results.json
        # Upload the secret scan report as an artifact

      - name: Gitleaks Job Summary
        if: always()
        run: |
          if [ -s gitleaks-results.json ]; then
            echo "### 🛑 Gitleaks detected secrets 🛑" >> $GITHUB_STEP_SUMMARY
            echo "| Rule ID | Commit | Start Line | Author | Date | Email | File |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|--------|------------|--------|------|-------|------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.[] | 
              "| \(.RuleID // "N/A") | \(.Commit // "N/A") | \(.StartLine // "N/A") | \(.Author // "N/A") | \(.Date // "N/A") | \(.Email // "N/A") | \(.File // "N/A") |"' gitleaks-results.json >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No secrets detected by Gitleaks." >> $GITHUB_STEP_SUMMARY
          fi
        # Summarize secret scan findings in the job summary

  trivy-deps:
    name: Dependency Scan (Trivy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        # Checkout repo to scan dependencies

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
        # Install Trivy scanner on runner

      - name: Run Trivy Dependency Scan
        run: |
          mkdir -p trivy-reports
          trivy fs requirements.txt --scanners vuln --vuln-type library --format json --output trivy-reports/trivy-results.json || true
          trivy fs requirements.txt --scanners vuln --vuln-type library --format table --output trivy-reports/trivy-report.txt || true
        # Scan Python dependencies for vulnerabilities

      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy-reports
        # Upload Trivy scan reports

  trivy-image:
    name: Docker Image Scan (Trivy)
    runs-on: ubuntu-latest
    needs: [trivy-deps]
    steps:
      - uses: actions/checkout@v4
        # Checkout repo for Docker build context

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        # Setup Docker Buildx for advanced build features

      - name: Build Docker Image
        run: |
          docker build --build-arg TMDB_V3_API_KEY=dummy_key -t my-app:latest .
        # Build the Docker image with dummy API key

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
        # Install Trivy for container scanning

      - name: Run Trivy Container Image Scan
        run: |
          mkdir -p trivy-container-reports
          trivy image --format json --output trivy-container-reports/image-results.json my-app:latest || true
          trivy image --format table --output trivy-container-reports/image-report.txt my-app:latest || true
        # Scan the built Docker image for vulnerabilities

      - name: Upload Trivy Container Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-container-reports
          path: trivy-container-reports
        # Upload Docker image vulnerability scan reports
      - name: Trivy Container Job Summary
        if: always()
        run: |
          if [ -s trivy-container-reports/image-results.json ]; then
            echo "### 🐳 Docker Image Vulnerabilities 🐳" >> $GITHUB
            _STEP_SUMMARY
            echo "| Vulnerability ID | Package | Installed Version | Fixed Version | Severity | Type | Description |" >> $GITHUB_STEP_SUMMARY
            echo "|------------------|---------|------------------|----------------|----------|------|-------------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.Results[].Vulnerabilities[] | 
              "| \(.VulnerabilityID) | \(.PkgName) | \(.InstalledVersion) | \(.FixedVersion // "N/A") | \(.Severity) | \(.Type) | \(.Description) |"' trivy
            -container-reports/image-results.json >> $GITHUB_STEP_SUMMARY
          else
            echo "No vulnerabilities detected in Docker image." >> $GITHUB_STEP_SUMMARY
          fi
        # Summarize Docker image scan findings in the job summary